const{spawn,spawnSync,exec,execSync,fork}=require("node:child_process"),$e=function(s){return new ExecCommand(s)},$s=function(s,e){return new SpawnCommand(s,e)},$f=function(s){return new ForkCommand(s)};class BaseBashCommand{}class ExecCommand extends BaseBashCommand{#processPromise=void 0;#process=void 0;#stdinBuffer=[];constructor(s){super(),this.bashscript=s}offerstdin(s){return this.#stdinBuffer.push(s+`
`),this.#pushTostdin(),this}offerstdinFile(s){}offerEnd(){return this.#stdinBuffer.push(0),this.#pushTostdin(),this}#pushTostdin(){void 0!==this.#process&&this.#stdinWrite(this.#stdinBuffer.shift())}#stdinWrite(s){0===s?this.#process.stdin.end():this.#process.stdin.write(s)}execute(){let t=this;return this.#processPromise=new Promise(function(e){for(t.stdout="",t.stderr="",t.#process=exec(t.bashscript,{maxBuffer:10485760});0!==t.#stdinBuffer.length;)t.#stdinWrite(t.#stdinBuffer.shift());t.#process.stdout.on("data",s=>{t.stdout+=s}),t.#process.stderr.on("data",s=>t.stderr+=s),t.#process.on("exit",s=>{t.exitCode=s,e()})}),this}pipeOutputTo(){}pipeOutputToFile(){}async waitUntilFinished(){return void 0!==this.#processPromise&&await this.#processPromise,this}}class SpawnCommand extends BaseBashCommand{execute(){}}class ForkCommand extends BaseBashCommand{}module.exports={$e:$e,$s:$s,$f:$f};